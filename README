# EC440-Thread

Hardest portion of this assignment so far is getting the registers and context right for pthread create. It was difficult to get the syntax correct.
To overcome this challenge, a friend recommended using a double pointer and that solved most of the issues outlined above.
pthread_create() was failing my test cases and it was hard to debug. The scheduler was also another area of my code with issues.
Implementing the signal handler and round robin was extremely challenging as it was novel.


Sources (not exhaustive):
https://man7.org/linux/man-pages/man3/usleep.3.html
https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_lib_ref/u/ualarm.html
https://pubs.opengroup.org/onlinepubs/7908799/xsh/sigemptyset.html
https://man7.org/linux/man-pages/man3/sigemptyset.3p.html
https://man7.org/linux/man-pages/man2/sigaction.2.html
https://stackoverflow.com/questions/2418812/catching-signal-inside-its-own-handler
https://www.tutorialspoint.com/c_standard_library/c_macro_setjmp.htm
https://en.cppreference.com/w/c/program/jmp_buf#:~:text=The%20jmp_buf%20type%20is%20an,and%20invocation%20of%20that%20block.
https://www.geeksforgeeks.org/thread-control-block-in-operating-system/
https://stackoverflow.com/questions/47824932/where-is-the-program-counter-stored-during-thread-context-switch
